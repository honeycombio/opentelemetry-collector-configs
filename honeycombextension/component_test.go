// Code generated by mdatagen. DO NOT EDIT.

package honeycombextension

import (
	"context"
	"testing"

	"github.com/open-telemetry/opamp-go/protobufs"
	"github.com/open-telemetry/opentelemetry-collector-contrib/extension/opampcustommessages"
	"github.com/stretchr/testify/require"
	"go.opentelemetry.io/collector/component"
	"go.opentelemetry.io/collector/confmap/confmaptest"
	"go.opentelemetry.io/collector/extension/extensiontest"
)

type nopHost struct{}

func (nh *nopHost) GetFactory(component.Kind, component.Type) component.Factory {
	return nil
}

func (nh *nopHost) GetExtensions() map[component.ID]component.Component {
	return map[component.ID]component.Component{
		component.NewID(component.MustNewType("opamp")): &nopExtension{},
	}
}

type nopExtension struct{}

func (ne *nopExtension) Start(context.Context, component.Host) error {
	return nil
}

func (ne *nopExtension) Shutdown(context.Context) error {
	return nil
}

func (ne *nopExtension) Register(capability string, opts ...opampcustommessages.CustomCapabilityRegisterOption) (handler opampcustommessages.CustomCapabilityHandler, err error) {
	return &nopHandler{}, nil
}

type nopHandler struct{}

func (nh *nopHandler) Message() <-chan *protobufs.CustomMessage {
	return nil
}

func (nh *nopHandler) SendMessage(messageType string, message []byte) (messageSendingChannel chan struct{}, err error) {
	return nil, nil
}

func (nh *nopHandler) Unregister() {}

func TestComponentLifecycleCustomHost(t *testing.T) {
	factory := NewFactory()

	cm, err := confmaptest.LoadConf("metadata.yaml")
	require.NoError(t, err)
	cfg := factory.CreateDefaultConfig()
	sub, err := cm.Sub("tests::config")
	require.NoError(t, err)
	require.NoError(t, sub.Unmarshal(&cfg))
	t.Run("lifecycle", func(t *testing.T) {
		firstExt, err := factory.Create(context.Background(), extensiontest.NewNopSettings(typ), cfg)
		require.NoError(t, err)
		require.NoError(t, firstExt.Start(context.Background(), &nopHost{}))
		require.NoError(t, firstExt.Shutdown(context.Background()))

		secondExt, err := factory.Create(context.Background(), extensiontest.NewNopSettings(typ), cfg)
		require.NoError(t, err)
		require.NoError(t, secondExt.Start(context.Background(), &nopHost{}))
		require.NoError(t, secondExt.Shutdown(context.Background()))
	})
}
