// Code generated by mdatagen. DO NOT EDIT.

package metadatatest

import (
	"context"
	"testing"

	"github.com/stretchr/testify/require"
	"go.opentelemetry.io/otel/sdk/metric/metricdata"
	"go.opentelemetry.io/otel/sdk/metric/metricdata/metricdatatest"

	"go.opentelemetry.io/collector/component/componenttest"

	"github.com/honeycombio/opentelemetry-collector-configs/honeycombextension/internal/metadata"
)

func TestSetupTelemetry(t *testing.T) {
	testTel := componenttest.NewTelemetry()
	tb, err := metadata.NewTelemetryBuilder(testTel.NewTelemetrySettings())
	require.NoError(t, err)
	defer tb.Shutdown()
	tb.HoneycombExtensionBytesReceivedLogs.Add(context.Background(), 1)
	tb.HoneycombExtensionBytesReceivedMetrics.Add(context.Background(), 1)
	tb.HoneycombExtensionBytesReceivedTraces.Add(context.Background(), 1)
	tb.HoneycombExtensionUsageReportFailure.Add(context.Background(), 1)
	tb.HoneycombExtensionUsageReportSuccess.Add(context.Background(), 1)
	AssertEqualHoneycombExtensionBytesReceivedLogs(t, testTel,
		[]metricdata.DataPoint[int64]{{Value: 1}},
		metricdatatest.IgnoreTimestamp())
	AssertEqualHoneycombExtensionBytesReceivedMetrics(t, testTel,
		[]metricdata.DataPoint[int64]{{Value: 1}},
		metricdatatest.IgnoreTimestamp())
	AssertEqualHoneycombExtensionBytesReceivedTraces(t, testTel,
		[]metricdata.DataPoint[int64]{{Value: 1}},
		metricdatatest.IgnoreTimestamp())
	AssertEqualHoneycombExtensionUsageReportFailure(t, testTel,
		[]metricdata.DataPoint[int64]{{Value: 1}},
		metricdatatest.IgnoreTimestamp())
	AssertEqualHoneycombExtensionUsageReportSuccess(t, testTel,
		[]metricdata.DataPoint[int64]{{Value: 1}},
		metricdatatest.IgnoreTimestamp())

	require.NoError(t, testTel.Shutdown(context.Background()))
}
